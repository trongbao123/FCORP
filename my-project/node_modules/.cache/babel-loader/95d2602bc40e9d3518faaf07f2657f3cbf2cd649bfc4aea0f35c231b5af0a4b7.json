{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport bookData from \"./book.json\";\nexport default {\n  name: \"CommentView\",\n  data() {\n    return {\n      book: bookData.book,\n      comments: bookData.comments,\n      newCommentAuthor: \"\",\n      newCommentContent: \"\",\n      newReplyContent: \"\"\n    };\n  },\n  methods: {\n    addComment() {\n      const newComment = {\n        id: this.comments.length + 1,\n        author: this.newCommentAuthor,\n        content: this.newCommentContent,\n        replies: []\n      };\n      this.comments.push(newComment);\n      this.saveComments();\n      this.newCommentAuthor = \"\";\n      this.newCommentContent = \"\";\n    },\n    deleteComment(commentId) {\n      const index = this.comments.findIndex(comment => comment.id === commentId);\n      this.comments.splice(index, 1);\n      this.saveComments();\n    },\n    addReply(commentId) {\n      const comment = this.comments.find(comment => comment.id === commentId);\n      const newReply = {\n        id: comment.replies.length + 1,\n        author: \"Anonymous\",\n        content: this.newReplyContent\n      };\n      comment.replies.push(newReply);\n      this.saveComments();\n      this.newReplyContent = \"\";\n    },\n    deleteReply(commentId, replyId) {\n      const comment = this.comments.find(comment => comment.id === commentId);\n      const index = comment.replies.findIndex(reply => reply.id === replyId);\n      comment.replies.splice(index, 1);\n      this.saveComments();\n    },\n    saveComments() {\n      const data = {\n        book: this.book,\n        comments: this.comments\n      };\n      const jsonData = JSON.stringify(data);\n      localStorage.setItem(\"comments\", jsonData);\n    }\n  },\n  created() {\n    const jsonData = localStorage.getItem(\"comments\");\n    if (jsonData) {\n      const data = JSON.parse(jsonData);\n      this.book = data.book;\n      this.comments = data.comments;\n    }\n  }\n};","map":{"version":3,"names":["bookData","name","data","book","comments","newCommentAuthor","newCommentContent","newReplyContent","methods","addComment","newComment","id","length","author","content","replies","push","saveComments","deleteComment","commentId","index","findIndex","comment","splice","addReply","find","newReply","deleteReply","replyId","reply","jsonData","JSON","stringify","localStorage","setItem","created","getItem","parse"],"sources":["C:\\Users\\Admin\\Desktop\\Test-FCORB-FE\\my-project\\src\\components\\Commentlist\\CommentList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>{{ book.title }}</h1>\r\n    <p>Author: {{ book.author }}</p>\r\n    <p>{{ book.description }}</p>\r\n\r\n    <h2>Comments</h2>\r\n    <ul>\r\n      <li v-for=\"comment in comments\" :key=\"comment.id\">\r\n        <div>\r\n          <strong>{{ comment.author }}</strong>\r\n          <span>{{ comment.content }}</span>\r\n          <button @click=\"deleteComment(comment.id)\">Delete</button>\r\n        </div>\r\n        <ul>\r\n          <li v-for=\"reply in comment.replies\" :key=\"reply.id\">\r\n            <div>\r\n              <strong>{{ reply.author }}</strong>\r\n              <span>{{ reply.content }}</span>\r\n              <button @click=\"deleteReply(comment.id, reply.id)\">Delete</button>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n        <form @submit.prevent=\"addReply(comment.id)\">\r\n          <input type=\"text\" v-model=\"newReplyContent\" placeholder=\"Write a reply...\" />\r\n          <button>Submit</button>\r\n        </form>\r\n      </li>\r\n    </ul>\r\n\r\n    <form @submit.prevent=\"addComment\">\r\n      <input type=\"text\" v-model=\"newCommentAuthor\" placeholder=\"Your name...\" />\r\n      <input type=\"text\" v-model=\"newCommentContent\" placeholder=\"Write a comment...\" />\r\n      <button>Submit</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport bookData from \"./book.json\"\r\n\r\nexport default {\r\n  name: \"CommentView\",\r\n  data() {\r\n    return {\r\n      book: bookData.book,\r\n      comments: bookData.comments,\r\n      newCommentAuthor: \"\",\r\n      newCommentContent: \"\",\r\n      newReplyContent: \"\"\r\n    }\r\n  },\r\n  methods: {\r\n    addComment() {\r\n      const newComment = {\r\n        id: this.comments.length + 1,\r\n        author: this.newCommentAuthor,\r\n        content: this.newCommentContent,\r\n        replies: []\r\n      }\r\n      this.comments.push(newComment)\r\n      this.saveComments()\r\n      this.newCommentAuthor = \"\"\r\n      this.newCommentContent = \"\"\r\n    },\r\n    deleteComment(commentId) {\r\n      const index = this.comments.findIndex((comment) => comment.id === commentId)\r\n      this.comments.splice(index, 1)\r\n      this.saveComments()\r\n    },\r\n    addReply(commentId) {\r\n      const comment = this.comments.find((comment) => comment.id === commentId)\r\n      const newReply = {\r\n        id: comment.replies.length + 1,\r\n        author: \"Anonymous\",\r\n        content: this.newReplyContent\r\n      }\r\n      comment.replies.push(newReply)\r\n      this.saveComments()\r\n      this.newReplyContent = \"\"\r\n    },\r\n    deleteReply(commentId, replyId) {\r\n      const comment = this.comments.find((comment) => comment.id === commentId)\r\n      const index = comment.replies.findIndex((reply) => reply.id === replyId)\r\n      comment.replies.splice(index, 1)\r\n      this.saveComments()\r\n    },\r\n    saveComments() {\r\n      const data = {\r\n        book: this.book,\r\n        comments: this.comments\r\n      }\r\n      const jsonData = JSON.stringify(data)\r\n      localStorage.setItem(\"comments\", jsonData)\r\n    }\r\n  },\r\n  created() {\r\n    const jsonData = localStorage.getItem(\"comments\")\r\n    if (jsonData) {\r\n      const data = JSON.parse(jsonData)\r\n      this.book = data.book\r\n      this.comments = data.comments\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";AAuCA,OAAOA,QAAO,MAAO,aAAY;AAEjC,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAEH,QAAQ,CAACG,IAAI;MACnBC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;MAC3BC,gBAAgB,EAAE,EAAE;MACpBC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE;IACnB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,MAAMC,UAAS,GAAI;QACjBC,EAAE,EAAE,IAAI,CAACP,QAAQ,CAACQ,MAAK,GAAI,CAAC;QAC5BC,MAAM,EAAE,IAAI,CAACR,gBAAgB;QAC7BS,OAAO,EAAE,IAAI,CAACR,iBAAiB;QAC/BS,OAAO,EAAE;MACX;MACA,IAAI,CAACX,QAAQ,CAACY,IAAI,CAACN,UAAU;MAC7B,IAAI,CAACO,YAAY,CAAC;MAClB,IAAI,CAACZ,gBAAe,GAAI,EAAC;MACzB,IAAI,CAACC,iBAAgB,GAAI,EAAC;IAC5B,CAAC;IACDY,aAAaA,CAACC,SAAS,EAAE;MACvB,MAAMC,KAAI,GAAI,IAAI,CAAChB,QAAQ,CAACiB,SAAS,CAAEC,OAAO,IAAKA,OAAO,CAACX,EAAC,KAAMQ,SAAS;MAC3E,IAAI,CAACf,QAAQ,CAACmB,MAAM,CAACH,KAAK,EAAE,CAAC;MAC7B,IAAI,CAACH,YAAY,CAAC;IACpB,CAAC;IACDO,QAAQA,CAACL,SAAS,EAAE;MAClB,MAAMG,OAAM,GAAI,IAAI,CAAClB,QAAQ,CAACqB,IAAI,CAAEH,OAAO,IAAKA,OAAO,CAACX,EAAC,KAAMQ,SAAS;MACxE,MAAMO,QAAO,GAAI;QACff,EAAE,EAAEW,OAAO,CAACP,OAAO,CAACH,MAAK,GAAI,CAAC;QAC9BC,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE,IAAI,CAACP;MAChB;MACAe,OAAO,CAACP,OAAO,CAACC,IAAI,CAACU,QAAQ;MAC7B,IAAI,CAACT,YAAY,CAAC;MAClB,IAAI,CAACV,eAAc,GAAI,EAAC;IAC1B,CAAC;IACDoB,WAAWA,CAACR,SAAS,EAAES,OAAO,EAAE;MAC9B,MAAMN,OAAM,GAAI,IAAI,CAAClB,QAAQ,CAACqB,IAAI,CAAEH,OAAO,IAAKA,OAAO,CAACX,EAAC,KAAMQ,SAAS;MACxE,MAAMC,KAAI,GAAIE,OAAO,CAACP,OAAO,CAACM,SAAS,CAAEQ,KAAK,IAAKA,KAAK,CAAClB,EAAC,KAAMiB,OAAO;MACvEN,OAAO,CAACP,OAAO,CAACQ,MAAM,CAACH,KAAK,EAAE,CAAC;MAC/B,IAAI,CAACH,YAAY,CAAC;IACpB,CAAC;IACDA,YAAYA,CAAA,EAAG;MACb,MAAMf,IAAG,GAAI;QACXC,IAAI,EAAE,IAAI,CAACA,IAAI;QACfC,QAAQ,EAAE,IAAI,CAACA;MACjB;MACA,MAAM0B,QAAO,GAAIC,IAAI,CAACC,SAAS,CAAC9B,IAAI;MACpC+B,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEJ,QAAQ;IAC3C;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,MAAML,QAAO,GAAIG,YAAY,CAACG,OAAO,CAAC,UAAU;IAChD,IAAIN,QAAQ,EAAE;MACZ,MAAM5B,IAAG,GAAI6B,IAAI,CAACM,KAAK,CAACP,QAAQ;MAChC,IAAI,CAAC3B,IAAG,GAAID,IAAI,CAACC,IAAG;MACpB,IAAI,CAACC,QAAO,GAAIF,IAAI,CAACE,QAAO;IAC9B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}