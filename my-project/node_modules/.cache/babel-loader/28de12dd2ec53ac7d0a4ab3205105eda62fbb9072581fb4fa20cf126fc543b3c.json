{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport CommentData from \"@/json/CommentData.json\";\nexport default {\n  name: \"CommentsView\",\n  props: {\n    comments: {\n      type: CommentData,\n      required: true\n    },\n    depth: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      newCommentContent: \"\",\n      replyComment: null,\n      newReplyContent: \"\"\n    };\n  },\n  methods: {\n    addComment() {\n      const newComment = {\n        id: this.comments.length + 1,\n        author: \"Bảo\",\n        content: this.newCommentContent,\n        replies: [],\n        depth: this.depth\n      };\n      this.comments.push(newComment);\n      this.saveComments();\n      this.newCommentContent = \"\";\n    },\n    deleteComment(commentId) {\n      const index = this.comments.findIndex(comment => comment.id === commentId);\n      this.comments.splice(index, 1);\n      this.saveComments();\n    },\n    editComment(comment) {\n      comment.editing = true;\n    },\n    saveComment(comment) {\n      comment.editing = false;\n      this.saveComments();\n    },\n    cancelEditComment(comment) {\n      comment.editing = false;\n    },\n    showReplyForm(comment) {\n      this.replyComment = comment;\n    },\n    addReply(comment) {\n      const newReply = {\n        id: comment.replies.length + 1,\n        author: \"Bảo\",\n        content: this.newReplyContent,\n        editing: false,\n        depth: this.depth + 1\n      };\n      comment.replies.push(newReply);\n      this.saveComments();\n      this.replyComment = null;\n      this.newReplyContent = \"\";\n    },\n    saveComments() {\n      localStorage.setItem(\"comments\", JSON.stringify(this.comments));\n    }\n  },\n  created() {\n    const jsonData = localStorage.getItem(\"comments\");\n    if (jsonData) {\n      this.comments = JSON.parse(jsonData);\n    }\n  },\n  components: {\n    CommentsView: this.$options.components.CommentsView\n  }\n};","map":{"version":3,"names":["CommentData","name","props","comments","type","required","depth","Number","default","data","newCommentContent","replyComment","newReplyContent","methods","addComment","newComment","id","length","author","content","replies","push","saveComments","deleteComment","commentId","index","findIndex","comment","splice","editComment","editing","saveComment","cancelEditComment","showReplyForm","addReply","newReply","localStorage","setItem","JSON","stringify","created","jsonData","getItem","parse","components","CommentsView","$options"],"sources":["C:\\Users\\Admin\\Desktop\\Test-FCORB-FE\\my-project\\src\\components\\Commentlist\\CommentList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Comments</h2>\r\n    <ul>\r\n      <li v-for=\"comment in comments\" :key=\"comment.id\">\r\n        <div :style=\"{ marginLeft: comment.depth * 20 + 'px' }\">\r\n          <strong>{{ comment.author }}</strong>\r\n          <span v-if=\"!comment.editing\">{{ comment.content }}</span>\r\n          <textarea v-if=\"comment.editing\" v-model=\"comment.content\"></textarea>\r\n          <button @click=\"deleteComment(comment.id)\">Delete</button>\r\n          <button @click=\"showReplyForm(comment)\">Reply</button>\r\n          <button v-if=\"!comment.editing\" @click=\"editComment(comment)\">Edit</button>\r\n          <button v-if=\"comment.editing\" @click=\"saveComment(comment)\">Save</button>\r\n          <button v-if=\"comment.editing\" @click=\"cancelEditComment(comment)\">Cancel</button>\r\n        </div>\r\n        <ul>\r\n          <comments-view :comments=\"comment.replies\" :depth=\"comment.depth + 1\" />\r\n        </ul>\r\n        <form v-if=\"comment === replyComment\" @submit.prevent=\"addReply(comment)\">\r\n          <textarea v-model=\"newReplyContent\" placeholder=\"Write a reply...\" :rows=\"3\"></textarea>\r\n          <button>Submit</button>\r\n        </form>\r\n      </li>\r\n    </ul>\r\n\r\n    <form @submit.prevent=\"addComment\">\r\n      <textarea v-model=\"newCommentContent\" placeholder=\"Write a comment...\" :rows=\"3\"></textarea>\r\n      <button>Submit</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CommentData from \"@/json/CommentData.json\"\r\n\r\nexport default {\r\n  name: \"CommentsView\",\r\n  props: {\r\n    comments: {\r\n      type: CommentData,\r\n      required: true\r\n    },\r\n    depth: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      newCommentContent: \"\",\r\n      replyComment: null,\r\n      newReplyContent: \"\"\r\n    }\r\n  },\r\n  methods: {\r\n    addComment() {\r\n      const newComment = {\r\n        id: this.comments.length + 1,\r\n        author: \"Bảo\",\r\n        content: this.newCommentContent,\r\n        replies: [],\r\n        depth: this.depth\r\n      }\r\n      this.comments.push(newComment)\r\n      this.saveComments()\r\n      this.newCommentContent = \"\"\r\n    },\r\n    deleteComment(commentId) {\r\n      const index = this.comments.findIndex((comment) => comment.id === commentId)\r\n      this.comments.splice(index, 1)\r\n      this.saveComments()\r\n    },\r\n    editComment(comment) {\r\n      comment.editing = true\r\n    },\r\n    saveComment(comment) {\r\n      comment.editing = false\r\n      this.saveComments()\r\n    },\r\n    cancelEditComment(comment) {\r\n      comment.editing = false\r\n    },\r\n    showReplyForm(comment) {\r\n      this.replyComment = comment\r\n    },\r\n    addReply(comment) {\r\n      const newReply = {\r\n        id: comment.replies.length + 1,\r\n        author: \"Bảo\",\r\n        content: this.newReplyContent,\r\n        editing: false,\r\n        depth: this.depth + 1\r\n      }\r\n      comment.replies.push(newReply)\r\n      this.saveComments()\r\n      this.replyComment = null\r\n      this.newReplyContent = \"\"\r\n    },\r\n    saveComments() {\r\n      localStorage.setItem(\"comments\", JSON.stringify(this.comments))\r\n    }\r\n  },\r\n  created() {\r\n    const jsonData = localStorage.getItem(\"comments\")\r\n    if (jsonData) {\r\n      this.comments = JSON.parse(jsonData)\r\n    }\r\n  },\r\n  components: {\r\n    CommentsView: this.$options.components.CommentsView\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";AAiCA,OAAOA,WAAU,MAAO,yBAAwB;AAEhD,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE;IACLC,QAAQ,EAAE;MACRC,IAAI,EAAEJ,WAAW;MACjBK,QAAQ,EAAE;IACZ,CAAC;IACDC,KAAK,EAAE;MACLF,IAAI,EAAEG,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE,EAAE;MACrBC,YAAY,EAAE,IAAI;MAClBC,eAAe,EAAE;IACnB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,MAAMC,UAAS,GAAI;QACjBC,EAAE,EAAE,IAAI,CAACb,QAAQ,CAACc,MAAK,GAAI,CAAC;QAC5BC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,IAAI,CAACT,iBAAiB;QAC/BU,OAAO,EAAE,EAAE;QACXd,KAAK,EAAE,IAAI,CAACA;MACd;MACA,IAAI,CAACH,QAAQ,CAACkB,IAAI,CAACN,UAAU;MAC7B,IAAI,CAACO,YAAY,CAAC;MAClB,IAAI,CAACZ,iBAAgB,GAAI,EAAC;IAC5B,CAAC;IACDa,aAAaA,CAACC,SAAS,EAAE;MACvB,MAAMC,KAAI,GAAI,IAAI,CAACtB,QAAQ,CAACuB,SAAS,CAAEC,OAAO,IAAKA,OAAO,CAACX,EAAC,KAAMQ,SAAS;MAC3E,IAAI,CAACrB,QAAQ,CAACyB,MAAM,CAACH,KAAK,EAAE,CAAC;MAC7B,IAAI,CAACH,YAAY,CAAC;IACpB,CAAC;IACDO,WAAWA,CAACF,OAAO,EAAE;MACnBA,OAAO,CAACG,OAAM,GAAI,IAAG;IACvB,CAAC;IACDC,WAAWA,CAACJ,OAAO,EAAE;MACnBA,OAAO,CAACG,OAAM,GAAI,KAAI;MACtB,IAAI,CAACR,YAAY,CAAC;IACpB,CAAC;IACDU,iBAAiBA,CAACL,OAAO,EAAE;MACzBA,OAAO,CAACG,OAAM,GAAI,KAAI;IACxB,CAAC;IACDG,aAAaA,CAACN,OAAO,EAAE;MACrB,IAAI,CAAChB,YAAW,GAAIgB,OAAM;IAC5B,CAAC;IACDO,QAAQA,CAACP,OAAO,EAAE;MAChB,MAAMQ,QAAO,GAAI;QACfnB,EAAE,EAAEW,OAAO,CAACP,OAAO,CAACH,MAAK,GAAI,CAAC;QAC9BC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,IAAI,CAACP,eAAe;QAC7BkB,OAAO,EAAE,KAAK;QACdxB,KAAK,EAAE,IAAI,CAACA,KAAI,GAAI;MACtB;MACAqB,OAAO,CAACP,OAAO,CAACC,IAAI,CAACc,QAAQ;MAC7B,IAAI,CAACb,YAAY,CAAC;MAClB,IAAI,CAACX,YAAW,GAAI,IAAG;MACvB,IAAI,CAACC,eAAc,GAAI,EAAC;IAC1B,CAAC;IACDU,YAAYA,CAAA,EAAG;MACbc,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACpC,QAAQ,CAAC;IAChE;EACF,CAAC;EACDqC,OAAOA,CAAA,EAAG;IACR,MAAMC,QAAO,GAAIL,YAAY,CAACM,OAAO,CAAC,UAAU;IAChD,IAAID,QAAQ,EAAE;MACZ,IAAI,CAACtC,QAAO,GAAImC,IAAI,CAACK,KAAK,CAACF,QAAQ;IACrC;EACF,CAAC;EACDG,UAAU,EAAE;IACVC,YAAY,EAAE,IAAI,CAACC,QAAQ,CAACF,UAAU,CAACC;EACzC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}