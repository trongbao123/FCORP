{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport bookData from \"../../../src/json/CommentData.json\";\nexport default {\n  name: \"CommentView\",\n  data() {\n    console.log(bookData);\n    return {\n      comments: bookData.comments,\n      newCommentAuthor: \"\",\n      newCommentContent: \"\",\n      newReplyContent: \"\"\n    };\n  },\n  methods: {\n    addComment() {\n      console.log(this, comments);\n      const newComment = {\n        // id: this.comments.length + 1,\n        author: this.newCommentAuthor,\n        content: this.newCommentContent,\n        replies: []\n      };\n      this.comments.push(newComment);\n      this.saveComments();\n      this.newCommentAuthor = \"\";\n      this.newCommentContent = \"\";\n    },\n    deleteComment(commentId) {\n      const index = this.comments.findIndex(comment => comment.id === commentId);\n      this.comments.splice(index, 1);\n      this.saveComments();\n    },\n    addReply(commentId) {\n      const comment = this.comments.find(comment => comment.id === commentId);\n      const newReply = {\n        id: comment.replies.length + 1,\n        author: \"Anonymous\",\n        content: this.newReplyContent\n      };\n      comment.replies.push(newReply);\n      this.saveComments();\n      this.newReplyContent = \"\";\n    },\n    deleteReply(commentId, replyId) {\n      const comment = this.comments.find(comment => comment.id === commentId);\n      const index = comment.replies.findIndex(reply => reply.id === replyId);\n      comment.replies.splice(index, 1);\n      this.saveComments();\n    },\n    saveComments() {\n      const data = {\n        book: this.book,\n        comments: this.comments\n      };\n      const jsonData = JSON.stringify(data);\n      localStorage.setItem(\"comments\", jsonData);\n    }\n  },\n  created() {\n    const jsonData = localStorage.getItem(\"comments\");\n    if (jsonData) {\n      const data = JSON.parse(jsonData);\n      this.book = data.book;\n      this.comments = data.comments;\n    }\n  }\n};","map":{"version":3,"names":["bookData","name","data","console","log","comments","newCommentAuthor","newCommentContent","newReplyContent","methods","addComment","newComment","author","content","replies","push","saveComments","deleteComment","commentId","index","findIndex","comment","id","splice","addReply","find","newReply","length","deleteReply","replyId","reply","book","jsonData","JSON","stringify","localStorage","setItem","created","getItem","parse"],"sources":["C:\\Users\\Admin\\Desktop\\Test-FCORB-FE\\my-project\\src\\components\\Commentlist\\CommentList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Comments</h2>\r\n    <ul>\r\n      <li v-for=\"comment in comments\" :key=\"comment.id\">\r\n        <div>\r\n          <strong>{{ comment.author }}</strong>\r\n          <span>{{ comment.content }}</span>\r\n          <button @click=\"deleteComment(comment.id)\">Delete</button>\r\n        </div>\r\n        <ul>\r\n          <li v-for=\"reply in comment.replies\" :key=\"reply.id\">\r\n            <div>\r\n              <strong>{{ reply.author }}</strong>\r\n              <span>{{ reply.content }}</span>\r\n              <button @click=\"deleteReply(comment.id, reply.id)\">Delete</button>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n        <form @submit.prevent=\"addReply(comment.id)\">\r\n          <input type=\"text\" v-model=\"newReplyContent\" placeholder=\"Write a reply...\" />\r\n          <button>Submit</button>\r\n        </form>\r\n      </li>\r\n    </ul>\r\n\r\n    <form @submit.prevent=\"addComment\">\r\n      <input type=\"text\" v-model=\"newCommentAuthor\" placeholder=\"Your name...\" required />\r\n      <input type=\"text\" v-model=\"newCommentContent\" placeholder=\"Write a comment...\" required />\r\n      <button>Submit</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport bookData from \"../../../src/json/CommentData.json\"\r\n\r\nexport default {\r\n  name: \"CommentView\",\r\n  data() {\r\n    console.log(bookData)\r\n    return {\r\n      comments: bookData.comments,\r\n      newCommentAuthor: \"\",\r\n      newCommentContent: \"\",\r\n      newReplyContent: \"\"\r\n    }\r\n  },\r\n  methods: {\r\n    addComment() {\r\n      console.log(this, comments)\r\n      const newComment = {\r\n        // id: this.comments.length + 1,\r\n        author: this.newCommentAuthor,\r\n        content: this.newCommentContent,\r\n        replies: []\r\n      }\r\n      this.comments.push(newComment)\r\n      this.saveComments()\r\n      this.newCommentAuthor = \"\"\r\n      this.newCommentContent = \"\"\r\n    },\r\n    deleteComment(commentId) {\r\n      const index = this.comments.findIndex((comment) => comment.id === commentId)\r\n      this.comments.splice(index, 1)\r\n      this.saveComments()\r\n    },\r\n    addReply(commentId) {\r\n      const comment = this.comments.find((comment) => comment.id === commentId)\r\n      const newReply = {\r\n        id: comment.replies.length + 1,\r\n        author: \"Anonymous\",\r\n        content: this.newReplyContent\r\n      }\r\n      comment.replies.push(newReply)\r\n      this.saveComments()\r\n      this.newReplyContent = \"\"\r\n    },\r\n    deleteReply(commentId, replyId) {\r\n      const comment = this.comments.find((comment) => comment.id === commentId)\r\n      const index = comment.replies.findIndex((reply) => reply.id === replyId)\r\n      comment.replies.splice(index, 1)\r\n      this.saveComments()\r\n    },\r\n    saveComments() {\r\n      const data = {\r\n        book: this.book,\r\n        comments: this.comments\r\n      }\r\n      const jsonData = JSON.stringify(data)\r\n      localStorage.setItem(\"comments\", jsonData)\r\n    }\r\n  },\r\n  created() {\r\n    const jsonData = localStorage.getItem(\"comments\")\r\n    if (jsonData) {\r\n      const data = JSON.parse(jsonData)\r\n      this.book = data.book\r\n      this.comments = data.comments\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";AAmCA,OAAOA,QAAO,MAAO,oCAAmC;AAExD,eAAe;EACbC,IAAI,EAAE,aAAa;EACnBC,IAAIA,CAAA,EAAG;IACLC,OAAO,CAACC,GAAG,CAACJ,QAAQ;IACpB,OAAO;MACLK,QAAQ,EAAEL,QAAQ,CAACK,QAAQ;MAC3BC,gBAAgB,EAAE,EAAE;MACpBC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE;IACnB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACXP,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEC,QAAQ;MAC1B,MAAMM,UAAS,GAAI;QACjB;QACAC,MAAM,EAAE,IAAI,CAACN,gBAAgB;QAC7BO,OAAO,EAAE,IAAI,CAACN,iBAAiB;QAC/BO,OAAO,EAAE;MACX;MACA,IAAI,CAACT,QAAQ,CAACU,IAAI,CAACJ,UAAU;MAC7B,IAAI,CAACK,YAAY,CAAC;MAClB,IAAI,CAACV,gBAAe,GAAI,EAAC;MACzB,IAAI,CAACC,iBAAgB,GAAI,EAAC;IAC5B,CAAC;IACDU,aAAaA,CAACC,SAAS,EAAE;MACvB,MAAMC,KAAI,GAAI,IAAI,CAACd,QAAQ,CAACe,SAAS,CAAEC,OAAO,IAAKA,OAAO,CAACC,EAAC,KAAMJ,SAAS;MAC3E,IAAI,CAACb,QAAQ,CAACkB,MAAM,CAACJ,KAAK,EAAE,CAAC;MAC7B,IAAI,CAACH,YAAY,CAAC;IACpB,CAAC;IACDQ,QAAQA,CAACN,SAAS,EAAE;MAClB,MAAMG,OAAM,GAAI,IAAI,CAAChB,QAAQ,CAACoB,IAAI,CAAEJ,OAAO,IAAKA,OAAO,CAACC,EAAC,KAAMJ,SAAS;MACxE,MAAMQ,QAAO,GAAI;QACfJ,EAAE,EAAED,OAAO,CAACP,OAAO,CAACa,MAAK,GAAI,CAAC;QAC9Bf,MAAM,EAAE,WAAW;QACnBC,OAAO,EAAE,IAAI,CAACL;MAChB;MACAa,OAAO,CAACP,OAAO,CAACC,IAAI,CAACW,QAAQ;MAC7B,IAAI,CAACV,YAAY,CAAC;MAClB,IAAI,CAACR,eAAc,GAAI,EAAC;IAC1B,CAAC;IACDoB,WAAWA,CAACV,SAAS,EAAEW,OAAO,EAAE;MAC9B,MAAMR,OAAM,GAAI,IAAI,CAAChB,QAAQ,CAACoB,IAAI,CAAEJ,OAAO,IAAKA,OAAO,CAACC,EAAC,KAAMJ,SAAS;MACxE,MAAMC,KAAI,GAAIE,OAAO,CAACP,OAAO,CAACM,SAAS,CAAEU,KAAK,IAAKA,KAAK,CAACR,EAAC,KAAMO,OAAO;MACvER,OAAO,CAACP,OAAO,CAACS,MAAM,CAACJ,KAAK,EAAE,CAAC;MAC/B,IAAI,CAACH,YAAY,CAAC;IACpB,CAAC;IACDA,YAAYA,CAAA,EAAG;MACb,MAAMd,IAAG,GAAI;QACX6B,IAAI,EAAE,IAAI,CAACA,IAAI;QACf1B,QAAQ,EAAE,IAAI,CAACA;MACjB;MACA,MAAM2B,QAAO,GAAIC,IAAI,CAACC,SAAS,CAAChC,IAAI;MACpCiC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEJ,QAAQ;IAC3C;EACF,CAAC;EACDK,OAAOA,CAAA,EAAG;IACR,MAAML,QAAO,GAAIG,YAAY,CAACG,OAAO,CAAC,UAAU;IAChD,IAAIN,QAAQ,EAAE;MACZ,MAAM9B,IAAG,GAAI+B,IAAI,CAACM,KAAK,CAACP,QAAQ;MAChC,IAAI,CAACD,IAAG,GAAI7B,IAAI,CAAC6B,IAAG;MACpB,IAAI,CAAC1B,QAAO,GAAIH,IAAI,CAACG,QAAO;IAC9B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}